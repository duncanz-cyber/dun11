<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Zeb11 File System</title>
  <style>
    body {
      margin: 0;
      background: #1e1e1e;
      font-family: sans-serif;
      color: white;
    }

    .window {
      background: #2c2c2c;
      border: 1px solid #444;
      width: 600px;
      height: 500px;
      margin: 20px auto;
      display: flex;
      flex-direction: column;
    }

    .title-bar {
      background: #3a3a3a;
      padding: 10px;
      font-weight: bold;
      border-bottom: 1px solid #444;
    }

    .toolbar {
      padding: 10px;
      background: #2c2c2c;
      display: flex;
      gap: 10px;
    }

    input {
      flex: 1;
      padding: 5px;
      border-radius: 3px;
      border: none;
    }

    button {
      padding: 5px 10px;
      background: #4caf50;
      border: none;
      color: white;
      cursor: pointer;
    }

    .content {
      flex: 1;
      overflow-y: auto;
      padding: 10px;
    }

    .item {
      padding: 5px;
      margin: 5px 0;
      background: #3a3a3a;
      cursor: pointer;
      border-radius: 4px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .breadcrumbs {
      padding: 5px 10px;
      background: #1e1e1e;
      font-size: 14px;
    }

    .breadcrumbs span {
      cursor: pointer;
      color: #4caf50;
    }

    .breadcrumbs span:hover {
      text-decoration: underline;
    }

    .item-name {
      flex: 1;
    }

    .delete-btn {
      background: transparent;
      border: none;
      color: #f44336;
      cursor: pointer;
      font-size: 16px;
    }
  </style>
</head>
<body>
  <div id="desktop">
    <div class="window" id="fileExplorer">
      <div class="title-bar">Zeb11 File Explorer</div>
      <div class="toolbar">
        <input type="text" id="newFileName" placeholder="New file or folder name">
        <button onclick="createItem('file')">New File</button>
        <button onclick="createItem('folder')">New Folder</button>
      </div>
      <div class="breadcrumbs" id="breadcrumbs"></div>
      <div class="content" id="fileContent"></div>
    </div>
  </div>

  <script>
    let fileSystem = JSON.parse(localStorage.getItem('zeb11_fs')) || { root: [] };
    let currentPath = [];

    function saveFileSystem() {
      localStorage.setItem('zeb11_fs', JSON.stringify(fileSystem));
    }

    function getCurrentFolder() {
      let folder = fileSystem.root;
      for (const name of currentPath) {
        const next = folder.find(f => f.type === 'folder' && f.name === name);
        if (!next) return null;
        folder = next.children;
      }
      return folder;
    }

    function createItem(type) {
      const name = document.getElementById('newFileName').value.trim();
      if (!name) return alert("Enter a name.");
      const folder = getCurrentFolder();
      if (!folder) return alert("Invalid folder path.");
      if (folder.find(i => i.name === name)) return alert("Item with this name already exists.");
      folder.push({ type, name, children: type === 'folder' ? [] : null });
      saveFileSystem();
      renderFileSystem();
      document.getElementById('newFileName').value = '';
    }

    function deleteItem(name) {
      let folder = getCurrentFolder();
      const index = folder.findIndex(item => item.name === name);
      if (index !== -1) {
        if (confirm(`Delete "${name}"?`)) {
          folder.splice(index, 1);
          saveFileSystem();
          renderFileSystem();
        }
      }
    }

    function renderFileSystem() {
      const container = document.getElementById('fileContent');
      container.innerHTML = '';
      const folder = getCurrentFolder();
      if (!folder) return;

      folder.forEach(item => {
        const div = document.createElement('div');
        div.className = 'item';

        const nameSpan = document.createElement('span');
        nameSpan.className = 'item-name';
        nameSpan.textContent = `${item.type === 'folder' ? '📁' : '📄'} ${item.name}`;
        if (item.type === 'folder') {
          nameSpan.onclick = () => {
            currentPath.push(item.name);
            renderFileSystem();
          };
        }

        const deleteBtn = document.createElement('button');
        deleteBtn.className = 'delete-btn';
        deleteBtn.innerHTML = '❌';
        deleteBtn.onclick = (e) => {
          e.stopPropagation();
          deleteItem(item.name);
        };

        div.appendChild(nameSpan);
        div.appendChild(deleteBtn);
        container.appendChild(div);
      });

      renderBreadcrumbs();
    }

    function renderBreadcrumbs() {
      const breadcrumbs = document.getElementById('breadcrumbs');
      breadcrumbs.innerHTML = '';

      const rootLink = document.createElement('span');
      rootLink.textContent = 'Root';
      rootLink.onclick = () => {
        currentPath = [];
        renderFileSystem();
      };
      breadcrumbs.appendChild(rootLink);

      currentPath.forEach((name, index) => {
        breadcrumbs.innerHTML += ' > ';
        const crumb = document.createElement('span');
        crumb.textContent = name;
        crumb.onclick = () => {
          currentPath = currentPath.slice(0, index + 1);
          renderFileSystem();
        };
        breadcrumbs.appendChild(crumb);
      });
    }

    renderFileSystem();
  </script>
</body>
</html>
